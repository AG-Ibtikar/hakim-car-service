// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  reviews       Review[]
  vehicles      Vehicle[]
  notifications Notification[]
  serviceRequests ServiceRequest[]
}

model Vehicle {
  id          String    @id @default(uuid())
  type        String
  make        String
  model       String
  year        Int
  licensePlate String   @unique
  vin         String?   // Removed @unique constraint
  vinImage    String?   // URL to the stored image
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  bookings    Booking[]
  serviceRequests ServiceRequest[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  duration    Int       // Duration in minutes
  category    ServiceCategory
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  vehicleId   String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
  status      BookingStatus @default(PENDING)
  scheduledAt DateTime
  completedAt DateTime?
  notes       String?
  review      Review?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(uuid())
  rating      Int       @db.SmallInt
  comment     String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  bookingId   String    @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  message     String
  type        NotificationType
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceRequest {
  id            String    @id @default(uuid())
  userId        String?
  vehicleId     String?
  serviceType   ServiceCategory
  location      Json
  description   String?
  status        ServiceRequestStatus @default(PENDING)
  estimatedCost Float?
  scheduledTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Guest request fields
  customerName  String?
  customerPhone String?
  vehicleType   String?
  make          String?
  model         String?

  user          User?     @relation(fields: [userId], references: [id])
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])

  @@map("service_requests")
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum ServiceCategory {
  MAINTENANCE
  REPAIR
  DIAGNOSTIC
  CLEANING
  TIRE_SERVICE
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_UPDATE
  BOOKING_COMPLETION
  SYSTEM
}

enum ServiceRequestStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 